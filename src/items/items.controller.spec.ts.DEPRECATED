import { Test, TestingModule } from '@nestjs/testing';

import { ItemsService } from './items.service';
import { ItemsController } from './items.controller';

jest.mock('./items.service');

describe('ItemsController', () => {
  let itemsService: ItemsService;
  let itemsController: ItemsController;

  beforeEach(async () => {
    const itemsModule: TestingModule = await Test.createTestingModule({
      controllers: [ItemsController],
      providers: [ItemsService],
    }).compile();

    itemsService = itemsModule.get<ItemsService>(ItemsService);
    itemsController = itemsModule.get<ItemsController>(ItemsController);
  });

  it('should be defined', () => {
    expect(itemsController).toBeDefined();
    expect(itemsService).toBeDefined();
  });

  describe('function create', () => {
    it('create one object', async () => {
      const item = {
        name: 'example',
        stock: 1,
        tags: ['red'],
      };

      const spy = jest.spyOn(itemsService, 'create');

      await itemsController.create(item);
      expect(spy).toBeCalled();
      expect(spy).toBeCalledTimes(1);
    });
  });

  describe('function findAll', () => {
    it('find all objects', async () => {
      const spy = jest.spyOn(itemsService, 'findAll');

      await itemsController.findAll(1, 1, 'test');
      expect(spy).toBeCalled();
      expect(spy).toBeCalledTimes(1);
    });

    it('find all objects with no params', async () => {
      const spy = jest.spyOn(itemsService, 'findAll');

      await itemsController.findAll(null, null, null);
      expect(spy).toBeCalled();
      expect(spy).toBeCalledTimes(1);
    });
  });

  describe('function count', () => {
    it('count all objects', async () => {
      const spy = jest.spyOn(itemsService, 'count');

      await itemsController.count();
      expect(spy).toBeCalled();
      expect(spy).toBeCalledTimes(1);
    });
  });

  describe('function findOne', () => {
    it('find one object', async () => {
      const spy = jest.spyOn(itemsService, 'findOne');

      await itemsController.findOne('1221212112');
      expect(spy).toBeCalled();
      expect(spy).toBeCalledTimes(1);
    });
  });

  describe('function update', () => {
    it('update one object', async () => {
      const item = {
        name: 'example',
        stock: 1,
        tags: ['red'],
      };

      const spy = jest.spyOn(itemsService, 'update');

      await itemsController.update('1221212112', item);
      expect(spy).toBeCalled();
      expect(spy).toBeCalledTimes(1);
    });
  });

  describe('function delete', () => {
    it('delete one object', async () => {
      const spy = jest.spyOn(itemsService, 'delete');

      await itemsController.delete('1221212112');
      expect(spy).toBeCalled();
      expect(spy).toBeCalledTimes(1);
    });
  });
});
